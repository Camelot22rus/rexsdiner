{"version":3,"file":"static/js/Employee.383de49b.chunk.js","mappings":"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","sources":["pages/Employee.tsx"],"sourcesContent":["import React from \"react\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport { useNavigate } from \"react-router-dom\";\nimport { selectPizzaData } from \"../redux/pizza/selectors\";\nimport { selectCart } from \"../redux/cart/selectors\";\nimport { selectIsOrderHistoryOpen } from \"../redux/orders/selectors\";\nimport { selectIsAuthenticated, selectUser } from \"../redux/user/selectors\";\nimport { loadUserFromStorage, logoutUser } from \"../redux/user/asyncActions\";\nimport {\n  addItem,\n  minusItem,\n  removeItem,\n  clearItems,\n} from \"../redux/cart/slice\";\nimport { toggleOrderHistory } from \"../redux/orders/slice\";\nimport { createOrder } from \"../redux/orders/asyncActions\";\nimport { fetchPizzasFromAPI } from \"../redux/pizza/asyncActions\";\nimport { useAppDispatch } from \"../redux/store\";\nimport { OrderHistory, CustomAlert, LoginModal } from \"../components\";\n\nconst Employee: React.FC = () => {\n  const dispatch = useDispatch();\n  const appDispatch = useAppDispatch();\n  const navigate = useNavigate();\n  const { items, status } = useSelector(selectPizzaData);\n  const { totalPrice, items: cartItems } = useSelector(selectCart);\n  const isOrderHistoryOpen = useSelector(selectIsOrderHistoryOpen);\n  const isAuthenticated = useSelector(selectIsAuthenticated);\n  const user = useSelector(selectUser);\n\n  const [searchValue, setSearchValue] = React.useState(\"\");\n  const [isBottomBarCollapsed, setIsBottomBarCollapsed] = React.useState(true);\n  const [alertMessage, setAlertMessage] = React.useState(\"\");\n  const [isAlertVisible, setIsAlertVisible] = React.useState(false);\n  const [hasTriedAuth, setHasTriedAuth] = React.useState(false);\n  const [orderNotes, setOrderNotes] = React.useState(\"\");\n\n  const totalCount = cartItems.reduce(\n    (sum: number, item: any) => sum + item.count,\n    0\n  );\n\n  // Load user from localStorage on component mount\n  React.useEffect(() => {\n    const loadAuth = async () => {\n      await appDispatch(loadUserFromStorage());\n      setHasTriedAuth(true);\n    };\n    loadAuth();\n  }, [appDispatch]);\n\n  // No need for isLoginModalOpen state or handleLoginModalClose\n\n  // Calculate 30% and 70% breakdown\n  const thirtyPercent = Math.round(totalPrice * 0.3 * 100) / 100;\n  const seventyPercent = Math.round(totalPrice * 0.7 * 100) / 100;\n\n  React.useEffect(() => {\n    const getPizzas = async () => {\n      const sortBy = \"id\"; // Sort by ID instead of title\n      const order = \"asc\";\n      const category = \"\";\n      const search = \"\";\n      const currentPage = \"1\";\n\n      appDispatch(\n        fetchPizzasFromAPI({ sortBy, order, category, search, currentPage })\n      );\n    };\n\n    getPizzas();\n  }, [appDispatch]);\n\n  const filteredItems = items.filter((item) =>\n    item.name && item.name.toLowerCase().includes(searchValue.toLowerCase())\n  );\n\n  // Group items by category while preserving original order\n  const groupedItems = filteredItems.reduce((groups, item) => {\n    const category = item.categorie ?? \"Без категории\";\n    if (!groups[category]) {\n      groups[category] = [];\n    }\n    groups[category].push(item);\n    return groups;\n  }, {} as Record<string, typeof filteredItems>);\n\n  // Get category names in the order they first appear in the JSON\n  const categoryNames = [];\n  const seenCategories = new Set();\n  for (const item of filteredItems) {\n    const category = item.categorie ?? \"Без категории\";\n    if (!seenCategories.has(category)) {\n      seenCategories.add(category);\n      categoryNames.push(category);\n    }\n  }\n\n  const onAddClick = (item: any) => {\n    const cartItem = {\n      id: item.id,\n      title: item.name, // Use name from JSON as title in cart\n      price: item.price,\n      imageUrl: item.imageUrl,\n      count: 0,\n    };\n    dispatch(addItem(cartItem));\n  };\n\n  const onMinusClick = (id: string) => {\n    const cartItem = cartItems.find((item) => item.id === id);\n    if (cartItem && cartItem.count === 1) {\n      // If count will become 0, remove the item completely\n      dispatch(removeItem(id));\n    } else {\n      // Otherwise just decrease the count\n      dispatch(minusItem(id));\n    }\n  };\n\n  const getItemCount = (id: string) => {\n    const cartItem = cartItems.find((item) => item.id === id);\n    return cartItem ? cartItem.count : 0;\n  };\n\n  const onCompleteOrder = async () => {\n    if (totalCount > 0) {\n      const orderData = {\n        items: cartItems.filter((item) => item.count > 0),\n        totalPrice,\n        totalCount,\n        thirtyPercent,\n        seventyPercent,\n        userId: user?.id,\n        notes: orderNotes,\n      };\n      try {\n        const resultAction = await appDispatch(createOrder(orderData));\n        if (createOrder.fulfilled.match(resultAction)) {\n          const order = resultAction.payload;\n          setAlertMessage(\n            `Заказ #${order.id} на сумму ${order.totalPrice} $ (${order.totalCount} позиций) добавлен в систему!`\n          );\n          setIsAlertVisible(true);\n          dispatch(clearItems());\n          setOrderNotes(\"\");\n        } else {\n          setAlertMessage(\"Ошибка при создании заказа. Попробуйте еще раз.\");\n          setIsAlertVisible(true);\n        }\n      } catch (error) {\n        setAlertMessage(\"Ошибка при создании заказа. Попробуйте еще раз.\");\n        setIsAlertVisible(true);\n      }\n    }\n  };\n\n  const toggleBottomBar = () => {\n    setIsBottomBarCollapsed(!isBottomBarCollapsed);\n  };\n\n  const closeAlert = () => {\n    setIsAlertVisible(false);\n    setAlertMessage(\"\");\n  };\n\n  // Show loading or authentication prompt if not authenticated\n  if (hasTriedAuth && !isAuthenticated) {\n    return (\n      <div className=\"employee-page\">\n        <div className=\"employee-auth-prompt\">\n          <h2>Employee Access Required</h2>\n          <p>Please log in to access the employee panel.</p>\n          <LoginModal\n            isOpen={hasTriedAuth && !isAuthenticated}\n            onClose={() => {}}\n          />\n        </div>\n      </div>\n    );\n  }\n\n  // Show loading state while checking authentication\n  if (!hasTriedAuth) {\n    return (\n      <div className=\"employee-page employee-loading\">\n        <div className=\"employee-auth-prompt\">\n          <h2>Loading</h2>\n          <p>Checking authentication...</p>\n        </div>\n      </div>\n    );\n  }\n\n  // Authenticated user - show employee panel\n  return (\n    <div className=\"employee-page\">\n      <div className=\"\">\n        <div className=\"employee-header\">\n          <div className=\"employee-header__top\">\n            <h2 className=\"employee-title\">Панель сотрудника</h2>\n            {user && (\n              <div className=\"employee-user-info\">\n                <span className=\"employee-username\">\n                  Добро пожаловать, {user.name} ({user.role})\n                </span>\n                <button\n                  className=\"employee-logout-btn\"\n                  onClick={() => {\n                    appDispatch(logoutUser());\n                  }}\n                >\n                  Выйти\n                </button>\n              </div>\n            )}\n          </div>\n          <div className=\"employee-header__controls\">\n            <div className=\"employee-search\">\n              <input\n                type=\"text\"\n                placeholder=\"Поиск продуктов...\"\n                value={searchValue}\n                onChange={(e) => setSearchValue(e.target.value)}\n                className=\"employee-search__input\"\n              />\n            </div>\n            <button\n              className=\"employee-orders-btn\"\n              onClick={() => dispatch(toggleOrderHistory())}\n            >\n              <svg\n                width=\"20\"\n                height=\"20\"\n                viewBox=\"0 0 24 24\"\n                fill=\"none\"\n                xmlns=\"http://www.w3.org/2000/svg\"\n              >\n                <path\n                  d=\"M9 11H15M9 15H15M17 21H7C5.89543 21 5 20.1046 5 19V5C5 3.89543 5.89543 3 7 3H12.5858C12.851 3 13.1054 3.10536 13.2929 3.29289L19.7071 9.70711C19.8946 9.89464 20 10.149 20 10.4142V19C20 20.1046 19.1046 21 18 21H17ZM17 21V11H13V7H7V19H17Z\"\n                  stroke=\"currentColor\"\n                  strokeWidth=\"2\"\n                  strokeLinecap=\"round\"\n                  strokeLinejoin=\"round\"\n                />\n              </svg>\n              <span>Заказы</span>\n            </button>\n          </div>\n        </div>\n\n        <div className=\"employee-content\">\n          <div className=\"product-list\">\n            {status === \"loading\" ? (\n              <div className=\"loading\">Загружаем продукты...</div>\n            ) : (\n              categoryNames.map((categoryName) => (\n                <div key={categoryName} className=\"category-section\">\n                  <h3 className=\"category-title\">{categoryName}</h3>\n                  <div className=\"category-items\">\n                    {groupedItems[categoryName].map((item) => {\n                      const itemCount = getItemCount(item.id);\n                      return (\n                        <div key={item.id} className=\"product-item\">\n                          <div className=\"product-item__info\">\n                            <h4 className=\"product-item__title\">{item.name}</h4>\n                            <span className=\"product-item__price\">\n                              {item.price} $\n                            </span>\n                          </div>\n                          <div className=\"product-item__controls\">\n                            {itemCount > 0 && (\n                              <button\n                                className=\"product-item__minus\"\n                                onClick={() => onMinusClick(item.id)}\n                              >\n                                −\n                              </button>\n                            )}\n                            {itemCount > 0 && (\n                              <span className=\"product-item__count\">\n                                {itemCount}\n                              </span>\n                            )}\n                            <button\n                              className=\"product-item__add\"\n                              onClick={() => onAddClick(item)}\n                            >\n                              +\n                            </button>\n                          </div>\n                        </div>\n                      );\n                    })}\n                  </div>\n                </div>\n              ))\n            )}\n          </div>\n        </div>\n      </div>\n\n      {/* Fixed bottom bar */}\n      <div\n        className={`employee-bottom-bar ${\n          isBottomBarCollapsed ? \"collapsed\" : \"\"\n        }`}\n        style={\n          {\n            // height: isBottomBarCollapsed ? \"90px\" : \"350px\",\n            // transition: \"height 0.3s ease\",\n          }\n        }\n      >\n        <button\n          className=\"employee-toggle-btn\"\n          onClick={toggleBottomBar}\n          aria-label={\n            isBottomBarCollapsed ? \"Expand bottom bar\" : \"Collapse bottom bar\"\n          }\n        >\n          <svg\n            width=\"20\"\n            height=\"20\"\n            viewBox=\"0 0 24 24\"\n            fill=\"none\"\n            xmlns=\"http://www.w3.org/2000/svg\"\n            className={`toggle-icon ${isBottomBarCollapsed ? \"collapsed\" : \"\"}`}\n          >\n            <path\n              d=\"M18 15l-6-6-6 6\"\n              stroke=\"currentColor\"\n              strokeWidth=\"2\"\n              strokeLinecap=\"round\"\n              strokeLinejoin=\"round\"\n            />\n          </svg>\n        </button>\n\n        <div className=\"employee-bottom-content\">\n          <div className=\"employee-total\">\n            <div className=\"employee-total__main\">\n              <span className=\"employee-total__count\">\n                {totalCount} позиций\n              </span>\n              <span className=\"employee-total__price\">{totalPrice} $</span>\n            </div>\n          </div>\n\n          {cartItems.filter((item) => item.count > 0).length > 0 && (\n            <div className=\"employee-cart-list\">\n              <h4 className=\"cart-list__title\">Добавленные товары:</h4>\n              <div className=\"cart-list__items\">\n                {cartItems\n                  .filter((item) => item.count > 0)\n                  .map((cartItem) => {\n                    // Find the original item to get combo components\n                    const originalItem = items.find(\n                      (item) => item.id === cartItem.id\n                    );\n                    const isCombo =\n                      originalItem?.comboComponents &&\n                      originalItem.comboComponents.length > 0;\n\n                    return (\n                      <div key={cartItem.id} className=\"cart-list__item\">\n                        <div className=\"cart-item__header\">\n                          <span className=\"cart-item__name\">\n                            {cartItem.title}\n                          </span>\n                          <div className=\"cart-item__details\">\n                            <span className=\"cart-item__count\">\n                              {cartItem.count}x\n                            </span>\n                            <span className=\"cart-item__price\">\n                              {cartItem.price * cartItem.count} $\n                            </span>\n                          </div>\n                        </div>\n                        {isCombo && (\n                          <div className=\"cart-item__combo-components\">\n                            <span className=\"combo-components__label\">\n                              Включает:\n                            </span>\n                            <div className=\"combo-components__list\">\n                              {originalItem.comboComponents?.map(\n                                (component: string) => (\n                                  <span\n                                    key={component}\n                                    className=\"combo-component\"\n                                  >\n                                    {component}\n                                  </span>\n                                )\n                              )}\n                            </div>\n                          </div>\n                        )}\n                      </div>\n                    );\n                  })}\n              </div>\n            </div>\n          )}\n\n          <div className=\"employee-notes\">\n            <input\n              type=\"text\"\n              placeholder=\"Заметки к заказу...\"\n              value={orderNotes}\n              onChange={(e) => setOrderNotes(e.target.value)}\n              className=\"employee-notes__input\"\n            />\n          </div>\n          <button\n            className={`employee-complete-btn ${\n              totalCount === 0 ? \"disabled\" : \"\"\n            }`}\n            onClick={onCompleteOrder}\n            disabled={totalCount === 0}\n          >\n            Добавить в заказ\n          </button>\n        </div>\n      </div>\n\n      {/* Order History Modal */}\n      {isOrderHistoryOpen && <OrderHistory />}\n\n      {/* Custom Alert */}\n      <CustomAlert\n        message={alertMessage}\n        isVisible={isAlertVisible}\n        onClose={closeAlert}\n      />\n\n    </div>\n  );\n};\n\nexport default Employee;\n"],"names":["Employee","dispatch","useDispatch","appDispatch","useAppDispatch","items","status","useNavigate","useSelector","selectPizzaData","totalPrice","cartItems","selectCart","isOrderHistoryOpen","selectIsOrderHistoryOpen","isAuthenticated","selectIsAuthenticated","user","selectUser","searchValue","setSearchValue","React","isBottomBarCollapsed","setIsBottomBarCollapsed","alertMessage","setAlertMessage","isAlertVisible","setIsAlertVisible","hasTriedAuth","setHasTriedAuth","orderNotes","setOrderNotes","totalCount","reduce","sum","item","count","async","loadUserFromStorage","loadAuth","thirtyPercent","Math","round","seventyPercent","fetchPizzasFromAPI","sortBy","order","category","search","currentPage","getPizzas","filteredItems","filter","name","toLowerCase","includes","groupedItems","groups","_item$categorie","categorie","push","categoryNames","seenCategories","Set","_item$categorie2","has","add","_jsx","className","children","_jsxs","LoginModal","isOpen","onClose","role","onClick","logoutUser","type","placeholder","value","onChange","e","target","toggleOrderHistory","width","height","viewBox","fill","xmlns","d","stroke","strokeWidth","strokeLinecap","strokeLinejoin","map","categoryName","itemCount","id","cartItem","find","getItemCount","price","removeItem","minusItem","onMinusClick","title","imageUrl","addItem","onAddClick","concat","style","toggleBottomBar","length","_originalItem$comboCo","originalItem","isCombo","comboComponents","component","orderData","userId","notes","resultAction","createOrder","fulfilled","match","payload","clearItems","error","disabled","OrderHistory","CustomAlert","message","isVisible","closeAlert"],"sourceRoot":""}